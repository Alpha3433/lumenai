
import { supabase } from '@/integrations/supabase/client';
import { toast } from '@/components/ui/use-toast';

interface OpenAIRequestParams {
  prompt: string;
  model: string;
  temperature?: number;
  maxTokens?: number;
}

interface OpenAIResponse {
  text: string;
  success: boolean;
  error?: string;
}

export const callOpenAI = async (params: OpenAIRequestParams): Promise<OpenAIResponse> => {
  try {
    console.log(`Making OpenAI request with model: ${params.model}, prompt length: ${params.prompt.length} chars`);
    
    // Call Supabase Edge Function for OpenAI
    const { data, error } = await supabase.functions.invoke('openai-completion', {
      body: {
        prompt: params.prompt,
        model: params.model || 'gpt-4o-mini',
        temperature: params.temperature || 0.7,
        max_tokens: params.maxTokens || 800
      }
    });

    if (error) {
      console.error('Error calling OpenAI through Supabase:', error);
      throw new Error(`Supabase function error: ${error.message}`);
    }

    if (!data || !data.text) {
      console.error('Invalid response format from OpenAI function:', data);
      throw new Error('Received invalid response format from OpenAI API');
    }

    console.log('OpenAI API call successful, received response');
    return {
      text: data.text,
      success: true
    };
  } catch (error) {
    console.error('Error in OpenAI call:', error);
    
    // We no longer use mock responses as fallbacks - we want to surface errors
    // to allow for proper error handling and retries
    return {
      text: '',
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error connecting to AI service'
    };
  }
};

// This function is kept for development/testing but we no longer use it as a fallback
function generateMockResponse(prompt: string): string {
  if (prompt.includes('executive summary')) {
    return 'This is a mock executive summary generated based on your business information. It would provide a concise overview of your business concept, target market, and objectives.';
  } else if (prompt.includes('market analysis')) {
    return 'This is a mock market analysis that would normally include industry trends, competitor analysis, and target audience insights generated by the AI.';
  } else if (prompt.includes('business model')) {
    return 'This is a mock business model section that would explain revenue streams, pricing strategies, and operational structure based on your inputs.';
  } else {
    return 'This is a generic mock response. In a real implementation, this would be replaced with actual content generated by OpenAI.';
  }
}
