
interface OpenAIRequestParams {
  prompt: string;
  model: string;
  temperature?: number;
  maxTokens?: number;
}

interface OpenAIResponse {
  text: string;
  success: boolean;
  error?: string;
}

export const callOpenAI = async (params: OpenAIRequestParams): Promise<OpenAIResponse> => {
  try {
    console.log('Mock OpenAI call with params:', params);
    
    // Since we're removing Supabase and no real API calls will be made,
    // we'll use the mock response directly
    return {
      text: generateMockResponse(params.prompt),
      success: true
    };
  } catch (error) {
    console.error('Error in mock OpenAI call:', error);
    return {
      text: 'An error occurred while generating content. Please try again.',
      success: false,
      error: 'Mock service error'
    };
  }
};

// This function provides mock responses based on prompt keywords
function generateMockResponse(prompt: string): string {
  // In a real implementation, this would be the response from OpenAI
  if (prompt.includes('executive summary')) {
    return 'This is a mock executive summary generated based on your business information. It would provide a concise overview of your business concept, target market, and objectives.';
  } else if (prompt.includes('market analysis')) {
    return 'This is a mock market analysis that would normally include industry trends, competitor analysis, and target audience insights generated by the AI.';
  } else if (prompt.includes('business model')) {
    return 'This is a mock business model section that would explain revenue streams, pricing strategies, and operational structure based on your inputs.';
  } else {
    return 'This is a generic mock response. In a real implementation, this would be replaced with actual content generated by OpenAI.';
  }
}
